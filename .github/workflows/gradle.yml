# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    # Gradle wrapperÏóê Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨    
    - name: Give Gradle wrapper execute permissions
      run: chmod +x ./gradlew
    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    ### üîπ application.yml ÏÉùÏÑ± (main)
    - name: Generate main application.yml
      run: |
        mkdir -p src/main/resources
        cat <<EOF > src/main/resources/application.yml
        spring:
          datasource:
            url: ${SPRING_DATASOURCE_URL}
            username: ${SPRING_DATASOURCE_USERNAME}
            password: ${SPRING_DATASOURCE_PASSWORD}
          jpa:
            hibernate:
              ddl-auto: update
            show-sql: true
        jwt:
          secret: ${JWT_SECRET}
        EOF
      env:
        SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
        SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET_KEY }}


    ### üîπ application.yml ÏÉùÏÑ± (test)
    - name: Generate test application.yml
      run: |
        mkdir -p src/test/resources
        cat <<EOF > src/test/resources/application.yml
        spring:
          datasource:
            url: jdbc:h2:mem:testdb
            driver-class-name: org.h2.Driver
            username: sa
            password:
          jpa:
            hibernate:
              ddl-auto: create
            show-sql: true
        EOF

    ### Gradle Build (ÌÖåÏä§Ìä∏ Ìè¨Ìï®)
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    ### Docker Î°úÍ∑∏Ïù∏
    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

     ###  Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }} -f ./Dockerfile .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}

     ###  EC2 Î∞∞Ìè¨
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "Starting deployment..."
          cd ~/wearther_backend

          echo "Pulling latest changes from main branch..."
          git fetch --all
          git reset --hard origin/main

          echo "Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}

          echo "Setting environment variables..."
          cat > .env <<EOL
          DB_NAME=${{ secrets.SPRING_DATASOURCE_URL }}
          DB_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
          DB_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_REPOSITORY=${{ secrets.DOCKERHUB_REPOSITORY }}
          GITHUB_SHA=${{ github.sha }}
          DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_ACCESS=2592000000
          JWT_EXPIRATION_REFRESH=2592000000
          EOL

          echo "Stopping spring-boot-app container..."
          docker-compose --env-file .env stop app || true

          echo "Removing spring-boot-app container..."
          docker-compose --env-file .env rm -f app || true

          echo "Recreating spring-boot-app service with docker-compose..."
          docker-compose --env-file .env up -d --no-deps --build app

          echo "Checking Docker containers..."
          docker-compose ps
          echo "Deployment completed successfully!"
      
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
